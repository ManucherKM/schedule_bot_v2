import { ERoles, EStage, adminName } from '@/Config'
import {
	ActivityController,
	ChatController,
	DivisionController,
	RoleController,
	SpkApiController,
	StudentController,
	TeacherController,
	UserController,
} from '@/Controller'
import { ArrayToChunks, CreateInlineKeyboard } from '@/Helper'
import { UserModel } from '@/Model'
import { Types, UpdateQuery } from 'mongoose'
import type TelegramApi from 'node-telegram-bot-api'
import type { InlineKeyboardButton, Message, SendMessageOptions } from 'node-telegram-bot-api'
import path from 'path'
import { ICandidate, IDtosUser } from './Types'

class User {
	async getById(id: number) {
		const user = await UserModel.findOne({ chatId: id })
		return user
	}

	async create(target: IDtosUser) {
		const user = await UserModel.create(target)

		if (!user) {
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
		}

		return user
	}

	async update(id: number, updates: UpdateQuery<IDtosUser>) {
		const user = await UserModel.findOne({ chatId: id })

		if (!user) {
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
		}

		const updateUser = await UserModel.updateOne({ chatId: id }, { ...updates })

		return updateUser
	}

	async remove(id: number) {
		const user = await UserModel.findOne({ chatId: id })

		if (!user) {
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
		}

		const res = await UserModel.deleteOne({ chatId: id })
		const isRemove = !!res.deletedCount

		if (!isRemove) {
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
		}

		return isRemove
	}

	async getByChatId(chatId: Types.ObjectId) {
		const user = await UserModel.findOne({ chat: chatId })
		return user
	}

	async register(bot: TelegramApi, msg: Message) {
		const chatId = msg.chat.id

		const foundChat = await ChatController.getById(chatId)

		if (foundChat) {
			return
		}

		const sticker = path.join(__dirname, '..', '..', 'Sticker', 'run.tgs')

		await bot.sendDocument(chatId, sticker)

		const next = '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'

		const message = `–ü—Ä–∏–≤–µ—Ç ${msg.chat.first_name} üëã\n\nC–º–æ—Ç—Ä—é —Ç—ã –Ω–æ–≤–µ–Ω—å–∫–∏–π üëÄ\n\n–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è —Å <a href="https://www.google.com">–ø–æ–ª–∏—Ç–∏–∫–æ–π –±–æ—Ç–∞</a>`

		await bot.sendMessage(chatId, message, {
			reply_markup: CreateInlineKeyboard([[{ text: next, callback_data: next }]]),
			parse_mode: 'HTML',
		})

		const roles = await RoleController.getAll()

		if (!roles) {
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–∏')
		}

		const divisions = await DivisionController.getAll()

		if (!divisions) {
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è')
		}

		const stages: string[] = Object.values(EStage)

		const candidats: ICandidate[] = []

		const groups = await SpkApiController.getGroups()

		if (!groups) {
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã')
		}

		const teachers = (await SpkApiController.getTeachers())?.map(t => t.name)

		if (!teachers) {
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∏—Ç–µ–ª–µ–π')
		}

		const isHandlerExists = bot.listenerCount('callback_query')

		if (isHandlerExists) return

		bot.on('callback_query', async ({ data }) => {
			const idx = candidats.findIndex(p => p.chatId === chatId)

			if (idx === -1) {
				candidats[candidats.length] = { chatId }
			}

			if (!data) {
				console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–∫–∏')
				return
			}

			const foundChat = await ChatController.getById(chatId)

			if (foundChat) {
				return
			}

			if (data === next) {
				const btns: InlineKeyboardButton[][] = []

				for (const { shortName } of divisions) {
					btns.push([{ text: shortName, callback_data: shortName }])
				}

				const message =
					'–û—Ç–ª–∏—á–Ω–æ üéâ\n\n–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n<b>–í—ã–±–µ—Ä–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b>'

				const options: SendMessageOptions = { reply_markup: CreateInlineKeyboard(btns), parse_mode: 'HTML' }

				return await bot.sendMessage(chatId, message, options)
			}

			if (divisions.find(d => d.shortName === data)) {
				candidats[idx].division = data

				const btns: InlineKeyboardButton[][] = []

				for (const { name } of roles) {
					btns.push([{ text: name, callback_data: name }])
				}

				const options: SendMessageOptions = { reply_markup: CreateInlineKeyboard(btns), parse_mode: 'HTML' }

				const message = '–ó–∞–ø–∏—Å–∞–ª ‚úç\n\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.\n\n<b>–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:</b>'

				return await bot.sendMessage(chatId, message, options)
			}

			if (data === ERoles.admin) {
				const message = `–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à–∏ <a href="https://t.me/${adminName}">–º–Ω–µ</a>`

				return await bot.sendMessage(chatId, message, { parse_mode: 'HTML', disable_web_page_preview: true })
			}

			if (data === ERoles.student) {
				candidats[idx].role = data

				const btns: InlineKeyboardButton[][] = []

				for (const stage of stages) {
					btns.push([{ text: stage, callback_data: stage }])
				}

				const options: SendMessageOptions = { reply_markup: CreateInlineKeyboard(btns), parse_mode: 'HTML' }

				const message = '–ó–∞–ø–∏—Å–∞–ª ‚úç\n\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.\n\n<b>–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:</b>'

				return await bot.sendMessage(chatId, message, options)
			}

			if (data === ERoles.teacher) {
				candidats[idx].role = data

				const btns: InlineKeyboardButton[] = []

				const teachers = await SpkApiController.getTeachers(candidats[idx].division)

				if (!teachers) {
					const message = '–ë–æ—Ç –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π'
					await bot.sendMessage(chatId, message)
					throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∏—Ç–µ–ª–µ–π')
				}

				for (const { name } of teachers) {
					btns.push({ text: `${name.split(' ')[0]}`, callback_data: name })
				}

				const formatBtns = ArrayToChunks(btns, 4)

				const options: SendMessageOptions = { reply_markup: CreateInlineKeyboard(formatBtns), parse_mode: 'HTML' }

				const message = '–ó–∞–ø–∏—Å–∞–ª ‚úç\n\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.\n\n<b>–ù–∞–π–¥–∏ —Å–µ–±—è –≤ —Å–ø–∏—Å–∫–µ:</b>'

				return await bot.sendMessage(chatId, message, options)
			}

			if (stages.includes(data)) {
				candidats[idx].stage = data

				const groups = await SpkApiController.getGroups(candidats[idx].division, data)

				if (!groups?.length) {
					await bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º')
					return
				}

				const btns: InlineKeyboardButton[] = []

				for (const group of groups) {
					btns.push({ text: group, callback_data: group })
				}

				const formatBtns = ArrayToChunks(btns, 4)

				const options: SendMessageOptions = { reply_markup: CreateInlineKeyboard(formatBtns), parse_mode: 'HTML' }

				const message = '–ó–∞–ø–∏—Å–∞–ª ‚úç\n\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.\n\n<b>–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:</b>'

				return await bot.sendMessage(chatId, message, options)
			}

			if (groups.includes(data)) {
				candidats[idx].group = data

				const message =
					'–£—Å–ø–µ—Ö üéâ\n\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /start	'

				if (!candidats[idx].stage) {
					await bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —Å—Ç—É–¥–µ–Ω—Ç–∞')
					return
				}

				const student = await StudentController.create({
					group: candidats[idx].group as string,
					stage: candidats[idx].stage as string,
				})

				if (!student) {
					console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É—á–∏—Ç–µ–ª—è')
					return
				}

				const chat = await ChatController.create({ chatId })

				if (!chat) {
					console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç')
					return
				}

				const activity = await ActivityController.create({})

				if (!activity) {
					console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
					return
				}

				const roleId = roles.find(r => r.name === candidats[idx].role)?._id

				if (!roleId) {
					console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å')
					return
				}

				const divisionId = divisions.find(d => d.shortName === candidats[idx].division)?._id

				if (!divisionId) {
					console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ')
					return
				}

				const user = await UserController.create({
					division: divisionId,
					role: roleId,
					tgId: msg.chat.username,
					student: student._id,
					chat: chat._id,
					activity: activity._id,
				})

				if (!user) {
					console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "–°—Ç—É–¥–µ–Ω—Ç"')
					return
				}

				candidats.splice(idx, 1)

				return await bot.sendMessage(chatId, message)
			}

			if (teachers.includes(data)) {
				candidats[idx].fullName = data

				const message =
					'–£—Å–ø–µ—Ö üéâ\n\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /start	'

				const teacher = await TeacherController.create({ fullName: candidats[idx].fullName as string })

				if (!teacher) {
					console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É—á–∏—Ç–µ–ª—è')
					return
				}

				const chat = await ChatController.create({ chatId })

				if (!chat) {
					console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç')
					return
				}

				const activity = await ActivityController.create({})

				if (!activity) {
					console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
					return
				}

				const roleId = roles.find(r => r.name === candidats[idx].role)?._id

				if (!roleId) {
					console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å')
					return
				}

				const divisionId = divisions.find(d => d.shortName === candidats[idx].division)?._id

				if (!divisionId) {
					console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ')
					return
				}

				const user = await UserController.create({
					division: divisionId,
					role: roleId,
					tgId: msg.chat.username,
					teacher: teacher._id,
					chat: chat._id,
					activity: activity._id,
				})

				if (!user) {
					console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "–£—á–∏—Ç–µ–ª—å"')
					return
				}

				candidats.splice(idx, 1)

				return await bot.sendMessage(chatId, message)
			}
		})

		return true
	}
}

export const UserService = new User()
