import { CreateInlineKeyboard } from '@/Helper'
import { UserModel } from '@/Model'
import { Types, UpdateQuery } from 'mongoose'
import type TelegramApi from 'node-telegram-bot-api'
import type { Message } from 'node-telegram-bot-api'
import path from 'path'
import { IDtosUser } from './Types'

class User {
	async getById(id: number) {
		const user = await UserModel.findOne({ chatId: id })
		return user
	}

	async create(target: IDtosUser) {
		const user = await UserModel.create(target)

		if (!user) {
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
		}

		return user
	}

	async update(id: number, updates: UpdateQuery<IDtosUser>) {
		const user = await UserModel.findOne({ chatId: id })

		if (!user) {
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
		}

		const updateUser = await UserModel.updateOne({ chatId: id }, { ...updates })

		return updateUser
	}

	async remove(id: number) {
		const user = await UserModel.findOne({ chatId: id })

		if (!user) {
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
		}

		const res = await UserModel.deleteOne({ chatId: id })
		const isRemove = !!res.deletedCount

		if (!isRemove) {
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
		}

		return isRemove
	}

	async getByChatId(chatId: Types.ObjectId) {
		const user = await UserModel.findOne({ chat: chatId })
		return user
	}

	async register(bot: TelegramApi, msg: Message) {
		const chatId = msg.chat.id

		const sticker = path.join('Sticker', 'run.tgs')

		await bot.sendSticker(chatId, sticker)

		const next = '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'

		const message = `–ü—Ä–∏–≤–µ—Ç ${msg.chat.first_name} üëã\n\nC–º–æ—Ç—Ä—é —Ç—ã –Ω–æ–≤–µ–Ω—å–∫–∏–π üëÄ\n\n–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è —Å <a href="https://www.google.com">–ø–æ–ª–∏—Ç–∏–∫–æ–π –±–æ—Ç–∞</a>`

		bot.sendMessage(chatId, message, {
			reply_markup: CreateInlineKeyboard([[{ text: next, callback_data: next }]]),
			parse_mode: 'HTML',
		})

		return true
	}
}

export const UserService = new User()
